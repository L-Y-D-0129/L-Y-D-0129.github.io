<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>日志 on 刘煜鼎de学习日记</title>
        <link>https://L-Y-D-0129.github.io/categories/%E6%97%A5%E5%BF%97/</link>
        <description>Recent content in 日志 on 刘煜鼎de学习日记</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>刘煜鼎</copyright>
        <lastBuildDate>Sat, 01 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://L-Y-D-0129.github.io/categories/%E6%97%A5%E5%BF%97/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Mysql</title>
        <link>https://L-Y-D-0129.github.io/p/mysql/</link>
        <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://L-Y-D-0129.github.io/p/mysql/</guid>
        <description>&lt;img src="https://L-Y-D-0129.github.io/p/mysql/5d199bc887724f9aa80e557d03cf7e30.webp" alt="Featured image of post Mysql" /&gt;&lt;h2 id=&#34;执行一个select语句都发生了什么&#34;&gt;执行一个select语句都发生了什么?
&lt;/h2&gt;&lt;h3 id=&#34;大概流程&#34;&gt;大概流程
&lt;/h3&gt;&lt;p&gt;一个语句的执行分为两层&lt;/p&gt;
&lt;p&gt;​	server层:建立连接,分析并执行sql具体有 连接器 查询缓存 解析器 预处理器 优化器 执行器&lt;/p&gt;
&lt;p&gt;​    存储引擎层:数据的存储和执行&lt;/p&gt;
&lt;p&gt;连接器：建立连接，管理连接，校验用户身份；&lt;/p&gt;
&lt;p&gt;查询缓存：查询语句如果命中查询缓存则直接返回，否则继续往下执行。mysql8.0已删除该换块；&lt;/p&gt;
&lt;p&gt;解析器： 解析sql,通过解析器对sol查询语句进行词法分析，语法分析，然后构建语法树，方便后续模块读取表名，字 段，语句类型；&lt;/p&gt;
&lt;p&gt;执行sql:   执行sql共有三个阶段：&lt;/p&gt;
&lt;p&gt;​				预处理阶段：检查表或字段是否存在；将 select 水 中的 符号扩展为表上的所有列。&lt;/p&gt;
&lt;p&gt;​				优化阶段：基于查询成本的考虑，选择查询成本最小的执行计划；&lt;/p&gt;
&lt;p&gt;​				执行阶段：根据执行计划执行sql查询语句，从存储引擎读取记录，返回给客户端；&lt;/p&gt;
&lt;h4 id=&#34;连接器&#34;&gt;&lt;strong&gt;连接器:&lt;/strong&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;##   ip指的是你要连接的服务器所在ip
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;##   user 指的是用户名,管理员角色为 root
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;##    -p 是密码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;查看数据库的连接情况&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;## 数据库中输入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;processlist&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;5c52844a-c987-4767-bed8-1107f112a61c.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;command(命令) 指的是用户当前命令状态 sleep指的是连接完就没有执行命令&lt;/p&gt;
&lt;p&gt;query 刚查询过  后面的time 是空闲时间 6号用户已经空闲了736秒&lt;/p&gt;
&lt;p&gt;空闲连接不会一直占用 mysql定义了最大空闲时间,由wait_timeout参数控制默认值是8小时&lt;/p&gt;
&lt;p&gt;超出了这个世界连接器就会自动将它断开.&lt;/p&gt;
&lt;p&gt;也可以自己断开连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;//x是id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;连接限制  用 max_connections 关键字表示 默认的是151 超过这个值就拒绝接下来的连接请求&lt;/p&gt;
&lt;p&gt;并报错提示 too many connections&lt;/p&gt;
&lt;p&gt;mysql 也和http一样有长短连接的概念区别如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//短连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;连接&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql服务器&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;tcp三次握手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;断开&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp四次挥手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//长连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;连接&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql服务器&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;tcp三次握手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;断开&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tcp四次挥手&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是使用长连接可能会导致占用内存增多，因为MySQL在执行查询过程中临时使用内存管理连接对象，这些连接对象资源只有在连接断开的时候才会释放。如果长连接累计很多，将导致MySQL服务占用内存太大，有可能会被系统强制杀掉，这样就会发生MySQL服务器异常重启现象。&lt;/p&gt;
&lt;p&gt;怎样解决长连接占用内存的问题呢？&lt;/p&gt;
&lt;p&gt;1.定期断开长连接&lt;/p&gt;
&lt;p&gt;2.客户端主动断开连接   客户端在执行完了一个很大的操作后在代码里调用 mysql_reset_connection函数来重置链接，达到释放内存的效果，将链接状态恢复到刚刚创建完成时的状态。&lt;/p&gt;
&lt;h4 id=&#34;查询缓存&#34;&gt;查询缓存
&lt;/h4&gt;&lt;p&gt;查询缓存就是 接受的一条指令之后先去查询缓存看一下,如果有就直接返回,它保存的形式是key -value  key是语句 value 是结果&lt;/p&gt;
&lt;p&gt;如果查询缓存没有就去数据库查一下返回并把这个语句和结果存key -value&lt;/p&gt;
&lt;p&gt;但是查询缓存命中率太低了,只要表一修改所有的查询缓存就会被清理掉&lt;/p&gt;
&lt;p&gt;有点鸡肋所以8.0之后就直接删除了&lt;/p&gt;
&lt;h4 id=&#34;解析器&#34;&gt;解析器
&lt;/h4&gt;&lt;p&gt;解析器只负责检查语法和构建语法树&lt;/p&gt;
&lt;p&gt;预处理&lt;/p&gt;
&lt;p&gt;检查sql查询语句中的表或者字段是否存在（其他博主扒源码发现的）&lt;/p&gt;
&lt;p&gt;将select中的*扩展为表上的所有列&lt;/p&gt;
&lt;h4 id=&#34;优化器&#34;&gt;优化器
&lt;/h4&gt;&lt;p&gt;优化器主要负责将sql查询语句的执行方案确定下来，比如选择使用什么索引&lt;/p&gt;
&lt;p&gt;要想知道一条语句使用了什么索引只需要在语句前加上expain命令，结果里面的key字段就是使用了哪个索引&lt;/p&gt;
&lt;h4 id=&#34;执行器&#34;&gt;执行器
&lt;/h4&gt;&lt;p&gt;执行sql语句&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;一行数据是如何被存储的&#34;&gt;一行数据是如何被存储的
&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;mysql的数据存放在哪个文件？&lt;/p&gt;
&lt;p&gt;使用命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;datadir&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一般是创建数据库就在/var/lib/mysql/ 里创建一个文件夹名字是数据库名&lt;/p&gt;
&lt;p&gt;假如说你有创建了一个表  table1 那么立里面就有三个文件&lt;/p&gt;
&lt;p&gt;db.opt 放当前数据库的默认字符集和字符校验规则&lt;/p&gt;
&lt;p&gt;table1.frm 放表结构信息&lt;/p&gt;
&lt;p&gt;table1.ibd 放表数据也被称为独占表空间文件&lt;/p&gt;
&lt;p&gt;表空间文件的结构是怎么样的?&lt;/p&gt;
&lt;p&gt;表空间由段(segment) 区(extent) 页 (page)行 (row)组成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;表空间结构.drawio.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;1行(row)&lt;/p&gt;
&lt;p&gt;数据库表中的数据都是按行存放的&lt;/p&gt;
&lt;p&gt;2页(page)&lt;/p&gt;
&lt;p&gt;数据库读取数据一次io操作是页为单位,一次最少读取一页 16kb&lt;/p&gt;
&lt;p&gt;数据表中的行记录是用数据页来管理的&lt;/p&gt;
&lt;p&gt;3区(extent)&lt;/p&gt;
&lt;p&gt;innodb不是b+树存储数据  每一层都是通过双向链表连接的,如果按照页来分配存储空间那么可能相邻两页物理位置离得很远,查询的时会产生大量随机i/o&lt;/p&gt;
&lt;p&gt;所以如果存储大量数据的时候,按照区来分配存储空间 每个区1mb,对于16kb一页的话连续64个页划分为一个区,这样相邻页直接物理地址也是连着的就能使用顺序i/o了&lt;/p&gt;
&lt;p&gt;4段(segment)&lt;/p&gt;
&lt;p&gt;表是由各个段组成的,段是由多个区组成的 ,段分为&lt;/p&gt;
&lt;p&gt;索引段:存放B+树的非叶子节点区的集合&lt;/p&gt;
&lt;p&gt;数据段:存放B+树叶子节点区的集合&lt;/p&gt;
&lt;p&gt;回滚段:存放的是回滚数据区的集合,mvcc多版本并发控制就是利用了回滚段实现了多版本并发控制&lt;/p&gt;
&lt;p&gt;InnoDB行格式有哪些？&lt;/p&gt;
&lt;p&gt;InnoDB提供了四种行格式，分别是Redundant ，Compact，Dynamic和Compressed行格式。&lt;/p&gt;
&lt;p&gt;5.1会默认使用compact5，7之后默认使用Dynamic&lt;/p&gt;
&lt;h3 id=&#34;compact行格式长什么样子&#34;&gt;compact行格式长什么样子？
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;COMPACT.drawio.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&#34;记录的额外信息&#34;&gt;记录的额外信息
&lt;/h3&gt;&lt;p&gt;包括：&lt;/p&gt;
&lt;h4 id=&#34;变长字段长度列表&#34;&gt;变长字段长度列表
&lt;/h4&gt;&lt;p&gt;主要是varchar text blob 类型的列所占的大小而且这个是逆序的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;t_test.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;变长字段长度列表1.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;变长字段长度列表2.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;变长字段长度列表3.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;为什么是逆序呢？&lt;/p&gt;
&lt;p&gt;因为记录头里存的是指向下一个记录头信息的指针 这样通过指针到下一个记录头信息位置&lt;/p&gt;
&lt;p&gt;往左读就是记录头信息往右读就是真实数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个数据库表的行格式都有变长度字段字节数列表么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实变长字段的字节数列表不是必须的。&lt;/p&gt;
&lt;p&gt;当数据表没有变长度的时候，比如说全部都是int类型的字段，这时候表里的行格式就不会有变长字段长度列表了，因为没有必要，不如去掉以节省空间&lt;/p&gt;
&lt;p&gt;所有变长字段长度列表只出现在数据表有边长字段的时候&lt;/p&gt;
&lt;h4 id=&#34;null值列表&#34;&gt;null值列表
&lt;/h4&gt;&lt;p&gt;null值列表必须是整字节1字节8比特所有如果要表示至少表示所以如果要至少要有8列不满8列会自动补0，而且也是逆序表示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;null值列表5.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;注意只有可以为空的列才有这个NULL值列表&lt;/p&gt;
&lt;h4 id=&#34;记录头的信息&#34;&gt;记录头的信息
&lt;/h4&gt;&lt;p&gt;delete_mask:标识这条数据是否被删除 1表示删除&lt;/p&gt;
&lt;p&gt;next_record:下一条记录位置&lt;/p&gt;
&lt;p&gt;record_type:表示当前记录的类型,0表示普通记录1表示b+树非叶子节点记录,2表示最小记录,3表示最大记录&lt;/p&gt;
&lt;h4 id=&#34;记录的真实数据&#34;&gt;&lt;strong&gt;记录的真实数据&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;里面除了真实数据还有三个隐藏的字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;记录的真实数据.webp&#34; alt=&#34;这是一张图片&#34;&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;row_id:如果不是主键或者唯一约束那么就会有这个row_id用来区分一样的数据 占6字节&lt;/p&gt;
&lt;p&gt;trx_id: 事务id,表示这个数据由哪个事务生成的, 占4个字节&lt;/p&gt;
&lt;p&gt;rool_pointer,  记录上一个版本的指针&lt;/p&gt;
&lt;p&gt;varchar(n)中n最大取值为多少?&lt;/p&gt;
&lt;h3 id=&#34;行溢出后mysql是怎么处理的&#34;&gt;行溢出后mysql是怎么处理的？
&lt;/h3&gt;&lt;p&gt;如果一个数据页存不了一条记录， 录，innodb存储引擎会自动将溢出的数据存放到溢出页中。
compact行格式针对行溢出的处理是这样的：当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在溢出页中，然后真实数据处用20字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。
compressed和dynamic这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储20个字节的指针来指向溢出页。而实际的数据都存储在溢出页中。&lt;/p&gt;
&lt;h3 id=&#34;mysql是怎么知道varchar实际占用数据的大小&#34;&gt;MySQL是怎么知道varchar（）实际占用数据的大小？
&lt;/h3&gt;&lt;p&gt;MySQL的compact行格式中会用变长字段长度列表存储变长字段实际占用的数据大小&lt;/p&gt;
&lt;h3 id=&#34;varcharn中n的最大取值为多少&#34;&gt;varchar（n）中n的最大取值为多少？
&lt;/h3&gt;&lt;p&gt;一行记录最大能存储65535字节 5字节的数据，但是这个是包含变长字段字节数列表所占用的字节数和null值列表所占用的字节数。所以，我们在算varchar(n)中n最大值时，需要减去这两个列表所占用的字节数。
如果一张表只有一个varchar(n)字段，且允许为null,字符集为ascii。varchar(n)中n最大取值为65532.
计算公式：65535-变长字段宇节数列表所占用的宇节数-null值列表所占用的字节数三65535-2-1三
65532.
如果有多个字段的话，要保证所有字段的长度+变长字段字节数列表所占用的字节数+null值列表所占用的字节数6&amp;lt;5535。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
